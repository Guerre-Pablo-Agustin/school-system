// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         String   @id @default(uuid())
  nombre     String
  email      String   @unique
  password   String
  telefono   String
  direccion  String
  rol        Rol      // ADMIN o DOCENTE (quitamos ESTUDIANTE)
  clases     Clase[]  @relation("DocenteClases")
  createdAt  DateTime @default(now())
}

model Estudiante {
  id         String   @id @default(uuid())
  nombre     String
  apellido   String
  dni        String?  @unique  // Opcional, para identificación
  telefono   String
  direccion  String
  grado      Int      // Ej: 1 (primero), 2 (segundo)...
  seccion    String   // Ej: "A", "B"...
  notas      Nota[]
  createdAt  DateTime @default(now())
}

model Nota {
  id           String     @id @default(uuid())
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
  estudianteId String
  materia      Materia    @relation(fields: [materiaId], references: [id])
  materiaId    String
  bimestre     Int        // 1 al 4
  nota         Float
  docenteId    String     // ID del docente (sin FK para simplificar)
  createdAt    DateTime   @default(now())
  @@unique([estudianteId, materiaId, bimestre])
}


model Materia {
  id         String     @id @default(uuid())
  nombre     String
  ciclo      Ciclo
  codigo     String     @unique
  clases     Clase[]
  notas      Nota[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Clase {
  id         String   @id @default(uuid())
  docente    User     @relation("DocenteClases", fields: [docenteId], references: [id])
  docenteId  String
  materia    Materia  @relation(fields: [materiaId], references: [id])
  materiaId  String
  @@unique([docenteId, materiaId]) // Evita duplicados
}


model Ponderacion {
  id         String   @id @default(uuid())
  ciclo      Ciclo    @unique // Solo 1 configuración por ciclo
  formula    String   // Ej: "0.3,0.3,0.2,0.2" (suma=1)
  createdAt  DateTime @default(now())
}




enum Rol {
 ADMIN
 DOCENTE
 SUPERADMIN
}

enum Ciclo {
 PRIMARIA
 SECUNDARIA
}